// @ts-nocheck
import {
  AvatarNext as Avatar,
  Flex,
  ListHeader,
  MenuNext as Menu,
  Text
} from '@momentum-ui/react-collaboration';
import { Item, Section } from '@react-stately/collections';
import { ISpeedDialRecord } from '@webex/component-adapter-interfaces/dist/cjs';
import React, { useCallback, useRef } from 'react';
import { ContextMenu, ContextMenuTrigger } from 'react-contextmenu';
import { useTranslation } from 'react-i18next';

import useWebexClasses from './hooks/useWebexClasses';

import { abbrDisplayName } from './SpeedDial.utils';
import './SpeedDialItem.styles.scss';
import { ISpeedDialItem } from './SpeedDials.types';
import { removeBracketsAndContent } from './utils/avatarInitials';

export interface ISpeedDialProps {
  id: string;
  /** The audio call for speed dial for the item */
  isAudio?: boolean;
  /** The avatar image for the item */
  item: ISpeedDialItem;
  /** The index for reference */
  itemIndex?: number;
  /** Triggered when speed dial item is pressed */
  onPress?: (item: ISpeedDialRecord) => void;
  /** Triggered when audio call action is pressed */
  onAudioCallPress?: (item: ISpeedDialRecord) => void;
  /** Triggered when video call action is pressed */
  onVideoCallPress?: (item: ISpeedDialRecord) => void;
  /** Triggered when remove action is pressed */
  onRemovePress?: (id: string) => void;
  /** Triggered when edit action is pressed */
  onEditPress?: (item: ISpeedDialRecord) => void;

  children?: React.ReactNode;
}

/**
 * Speed Dial Item component renders individual entries.
 *
 * @param {ISpeedDialProps} obj The props for the component
 * @param {number} obj.itemIndex The index of the speed dial
 * @param {Function} obj.onVideoCallPress Handle when item video call button is pressed
 * @param {Function} obj.onAudioCallPress Handle when item audio call button is pressed
 * @param {Function} obj.onRemovePress Triggered when remove action is pressed
 * @param {Function} obj.onEditPress Triggered when edit action is pressed
 * @param {React.ReactNode} obj.children Drag handle component
 * @returns {React.Component} A CallHistoryItem for rendering
 */
export const SpeedDialItem = ({
  id,
  item,
  isAudio = false,
  itemIndex = undefined,
  onPress = undefined,
  onAudioCallPress = undefined,
  onVideoCallPress = undefined,
  onEditPress = undefined,
  onRemovePress = undefined,
  children = undefined,
}: ISpeedDialProps) => {
  const [classes, sc] = useWebexClasses('speed-dial-item', undefined, {});
  const { t } = useTranslation('WebexSpeedDials');
  const actionBtnRef = useRef<HTMLButtonElement>();
  const contextMenuId = `${id}-context-menu`;
  const removeLabel = t('item.remove.label');
  const editLabel = t('item.edit.label');
  const audioCallLabel = t('item.audioCall.label');
  const videoCallLabel = t('item.videoCall.label');
  const contextTriggerRef = useRef<ContextMenu>(null);

  const handleClick = useCallback(() => {
    if (onPress) {
      onPress(item);
    }
  }, [item, onPress]);

  const handleAction = useCallback((key: React.Key) => {
    // close the menu when an action is pressed
    contextTriggerRef.current?.hideMenu({ keyCode: 27 });
    switch (key) {
      case '.$remove':
        if (onRemovePress) {
          onRemovePress(item.id);
        }
        break;
      case '.$edit':
        if (onEditPress) {
          onEditPress(item);
        }
        break;
      case '.$audioCall':
        if (onAudioCallPress) {
          onAudioCallPress(item);
        }
        break;
      case '.$videoCall':
        if (onVideoCallPress) {
          onVideoCallPress(item);
        }
        break;
      default:
        throw new Error('Cannot find action');
    }
  }, []);

  return (
    <>
      <ContextMenuTrigger id={contextMenuId} holdToDisplay={-1}>
        <div
          className={classes}
          key={itemIndex}
          onContextMenu={(e) => {
            e.preventDefault();
            actionBtnRef.current?.click();
          }}
        >
          <Flex
            alignItems="center"
            className={sc('content')}
            direction="column"
            role="button"
            tabIndex={0}
            onClick={handleClick}
          >
            {children && (
              <div className={sc('drag-handle')}>
                <span className={sc('drag-icon')}>{children}</span>
              </div>
            )}
            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}
            <div className={sc('actions')}>
              <Flex className={sc('avatar')}>
                <Avatar initials={removeBracketsAndContent(item?.displayName)} size={48} title={item?.displayName} src={item?.photo} />
              </Flex>
              <Flex className={sc('action')}>
              {isAudio && 
                // <Icon scale={32} name="handset" weight="filled" />
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none">
                  <path d="M30.1165 22.8688L26.7615 19.5136C26.0809 18.8355 25.159 18.455 24.1982 18.4556C23.2374 18.4563 22.3161 18.8379 21.6363 19.5169C21.6363 19.5169 19.8412 21.3429 19.4743 21.7296C18.2566 21.7498 17.0473 21.5239 15.919 21.0656C14.7906 20.6072 13.7664 19.9258 12.9078 19.0621C11.1941 17.3325 10.2185 15.0054 10.1864 12.5708C10.6292 12.127 12.453 10.334 12.4562 10.3307C12.7927 9.9945 13.0596 9.59529 13.2417 9.15587C13.4238 8.71646 13.5176 8.24547 13.5176 7.76982C13.5176 7.29416 13.4238 6.82317 13.2417 6.38376C13.0596 5.94435 12.7927 5.54513 12.4562 5.20892L9.1008 1.85417C8.40795 1.19307 7.48709 0.824219 6.52944 0.824219C5.57179 0.824219 4.65093 1.19307 3.95809 1.85417L2.16405 3.6472C0.831374 4.97987 0.445724 7.87585 1.17967 11.0253C1.83555 13.841 3.67245 18.2509 8.69535 23.275C13.7182 28.299 18.1294 30.1352 20.944 30.7915C21.9408 31.0291 22.9614 31.1522 23.9861 31.1585C25.5509 31.2752 27.1014 30.7916 28.3224 29.806L30.1165 28.0128C30.4543 27.6751 30.7223 27.2742 30.9052 26.8329C31.0881 26.3916 31.1822 25.9186 31.1822 25.4409C31.1822 24.9632 31.0881 24.4902 30.9052 24.0489C30.7223 23.6076 30.4543 23.2066 30.1165 22.869V22.8688Z" fill="black" fill-opacity="0.95"/>
                </svg>
                }
                {!isAudio && 
                // <Icon scale={32} name="video" />
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="24" viewBox="0 0 32 24" fill="none">
                  <path d="M30.3863 4.93905C30.1333 4.78333 29.8437 4.69717 29.5467 4.68927C29.2497 4.68137 28.9559 4.75201 28.695 4.89405L24.4395 7.59968V5.25C24.438 3.9078 23.9041 2.621 22.955 1.67192C22.006 0.722836 20.7192 0.188989 19.377 0.1875H5.87695C4.53474 0.188959 3.24792 0.722796 2.29884 1.67188C1.34975 2.62097 0.815912 3.90779 0.814453 5.25V18.75C0.815912 20.0922 1.34975 21.379 2.29884 22.3281C3.24792 23.2772 4.53474 23.811 5.87695 23.8125H19.377C20.7192 23.811 22.006 23.2772 22.955 22.3281C23.9041 21.379 24.438 20.0922 24.4395 18.75V16.3998L28.7455 19.1345C29.0028 19.2631 29.2886 19.3237 29.5759 19.3107C29.8632 19.2977 30.1425 19.2115 30.3871 19.0603C30.6317 18.9091 30.8336 18.6978 30.9736 18.4466C31.1137 18.1954 31.1872 17.9126 31.1872 17.625V6.375C31.1884 6.08699 31.1154 5.80353 30.9751 5.552C30.8348 5.30046 30.632 5.08935 30.3863 4.93905Z" fill="black" fill-opacity="0.95"/>
                </svg>
                }
              </Flex>
            </div>
            <Flex direction="column" className={sc('meta')} alignItems="center">
              <Text type="body-primary" className={sc('name')}>
                {abbrDisplayName(item?.displayName)}
              </Text>
              <Text type="body-secondary" className={sc('status')}>
                {item?.phoneType}
              </Text>
            </Flex>
          </Flex>
        </div>
      </ContextMenuTrigger>
      {/* Context Menu Actions */}
      <ContextMenu
        className={sc('context-menu')}
        id={contextMenuId}
        preventHideOnResize
        preventHideOnContextMenu
        ref={contextTriggerRef}
      >
        <Menu
          key={`${item?.id}-menu`}
          aria-label="Speed Dial Item Menu"
          disabledKeys={[item?.callType as React.Key]}
          defaultSelectedKeys={item?.callType}
          onAction={handleAction}
          className={sc('menu')}
        >
          <Section key={0}>
            <Item key="audioCall">{audioCallLabel}</Item>
            <Item key="videoCall">{videoCallLabel}</Item>
          </Section>
          <Section
            key={1}
            title={<ListHeader outline outlineColor="secondary" />}
          >
            {(!item || (item.id && item.id.startsWith('l_'))) && (
              <Item key="edit">{editLabel}</Item>
            )}
            <Item key="remove">{removeLabel}</Item>
          </Section>
        </Menu>
      </ContextMenu>
    </>
  );
};
